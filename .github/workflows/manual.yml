permissions:
  contents: write
name: Manual workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 2 * * *'
  workflow_dispatch: 

jobs:
  deploy-and-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: 9478
          POSTGRES_DB: database_name
        ports:
          - 13306:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
          
    steps:
      - name: checkout
        uses: actions/checkout@v4

      - name: Deploy backend application
        run: |
            tree
            echo "Deploying backend application..."
            docker compose -f ${{ github.workspace }}/docker-composer.yml up


     
      - name: Wait for PostgreSQL to be ready
        run: |
          for i in {1..30}; do
            pg_isready -h localhost -p 13306 -U postgres
            RESULT=$?
            if [ $RESULT -eq 0 ]; then
              echo "PostgreSQL is ready!"
              exit 0
            fi
            echo "Waiting for PostgreSQL to be ready... ($i/30)"
            sleep 2
          done
          echo "Failed to connect to PostgreSQL"
          exit 1
          
     
      - name: Wait for backend service to start
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:9100/health | grep -q "ok"; then
              echo "Backend service is ready!"
              exit 0
            fi
            echo "Waiting for backend service to be ready... ($i/30)"
            sleep 2
          done
          echo "Failed to connect to backend service"
          exit 1

      # - name: Run functional tests
      #   run: |
      #     echo "Testing API endpoints..."
          
      #     CREATE_RESPONSE=$(curl -s -X POST \
      #       -H "Content-Type: application/json" \
      #       -d '{"username":"testuser","email":"test@example.com"}' \
      #       http://localhost:8080/api/users)
      #     echo "Create user response: $CREATE_RESPONSE"
          
      #     GET_RESPONSE=$(curl -s http://localhost:8080/api/users/1)
      #     echo "Get user response: $GET_RESPONSE"
          
      #     UPDATE_RESPONSE=$(curl -s -X PUT \
      #       -H "Content-Type: application/json" \
      #       -d '{"username":"updateduser","email":"updated@example.com"}' \
      #       http://localhost:8080/api/users/1)
      #     echo "Update user response: $UPDATE_RESPONSE"
          
      #     DELETE_RESPONSE=$(curl -s -X DELETE http://localhost:8080/api/users/1)
      #     echo "Delete user response: $DELETE_RESPONSE"

      # - name: Send notification
      #   if: always()
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      #     SLACK_CHANNEL: backend-monitoring
      #     SLACK_TITLE: Backend Test Results
      #     SLACK_MESSAGE: "Database deployment and API tests ${{ job.status }}"
      #     SLACK_COLOR: ${{ job.status == 'success' && 'good' || 'danger' }}
